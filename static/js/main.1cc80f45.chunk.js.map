{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","componentDidMount","a","customNode","nodeUrl","chainId","portis","Portis","web3","Web3","provider","eth","getAccounts","accounts","console","log","net","getId","networkId","whistleBlowerContract","Contract","whistleBlower","abi","networks","address","setState","contractAddress","state","isLoggedIn","then","error","result","alert","handleRegisterOrganisation","methods","registerOrganisation","orgName","orgType","orgAddress","url","noOfOrgs","send","from","newOrg","getNoOfOrgs","organisationMappingLength","getCaseCount","caseMappingLength","caseCount","handleCaseMapping","caseArray","i","caseMapping","call","caseData","push","handleOrganisationMapping","orgArray","organisationMapping","orgData","handleOrgCaseCount","orgCaseCount","thisOrgCaseCount","handleOrgLogin","isAnOrganisationLogin","handleCreateCase","createCase","title","description","proof","newCase","handleApproveValidity","id","approveValidity","approved","this","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1cc80f45.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport whistleBlower from \"./contracts/WhistleBlower.json\";\nimport Portis from '@portis/web3';\nimport Web3 from 'web3';\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      web3: {},\n      contractAddress: \"\"\n    }\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const customNode = {\n        nodeUrl: 'https://rpc-mumbai.matic.today/',\n        chainId: 80001,\n      };\n      \n      const portis = new Portis('fa8f42fe-5b1d-414b-a511-1f28494d6852', customNode);\n      this.web3 = new Web3(portis.provider);\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n      console.log(\"Accounts from metamask: \" + this.accounts);\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n      console.log(\"Matic network ID: \" + this.networkId);\n      \n      this.whistleBlowerContract = new this.web3.eth.Contract(\n        whistleBlower.abi,\n        whistleBlower.networks[this.networkId] && whistleBlower.networks[this.networkId].address,\n      );\n      console.log(\"Contract Instance : \" + this.whistleBlowerContract);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3: this.web3,\n        contractAddress: whistleBlower.networks[this.networkId].address\n      });\n      console.log(\"Web3 Obj : \" + this.state.web3);\n      portis.isLoggedIn().then(({ error, result }) => {\n        console.log(error, result);\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  handleRegisterOrganisation = async() => {\n    let newOrg = await this.whistleBlowerContract.methods.registerOrganisation(\n      this.state.orgName,\n      this.state.orgType,\n      this.state.orgAddress,\n      this.state.url,\n      this.state.noOfOrgs\n    ).send({ from: this.accounts[0] })\n    console.log(newOrg);\n  }\n\n  getNoOfOrgs = async() => {\n    const noOfOrgs = await this.whistleBlowerContract.methods.organisationMappingLength;\n    this.setState({\n      noOfOrgs: noOfOrgs\n    })\n  }\n\n  getCaseCount = async() =>  {\n    const caseCount = await this.whistleBlowerContract.methods.caseMappingLength;\n    this.setState({\n      caseCount: caseCount\n    })\n  }\n\n  handleCaseMapping = async() =>  {\n    let caseArray = [];\n    for (let i = 0; i < this.state.caseCount; i++) {\n      let caseData = await this.whistleBlowerContract.methods.caseMapping(i).call();\n      caseArray.push(caseData);\n    }\n    this.setState({\n      caseArray: caseArray\n    })\n  }\n\n  handleOrganisationMapping = async() =>  {\n    let orgArray = [];\n    for (let i = 0; i < this.state.noOfOrgs; i++) {\n      let orgData = await this.whistleBlowerContract.methods.organisationMapping(i).call();\n      orgArray.push(orgData);\n    }\n    this.setState({\n      orgArray: orgArray\n    })\n  }\n\n  handleOrgCaseCount = async(address) => {\n    let thisOrgCaseCount = await this.whistleBlowerContract.methods.orgCaseCount(address).call();\n    console.log(thisOrgCaseCount);\n  }\n\n  handleOrgLogin = async (address) => {\n    return await this.whistleBlowerContract.methods.isAnOrganisationLogin(address).call();\n  }\n\n  handleCreateCase = async (address) => {\n    let newCase = await this.whistleBlowerContract.methods.createCase(\n      this.state.title,\n      this.state.description,\n      this.state.proof,\n      this.accounts[0],\n      this.state.url,\n      this.state.caseCount\n    ).send({ from: this.accounts[0] })\n    console.log(newCase);\n  }\n\n  handleApproveValidity = async (id) => {\n    let approved = await this.whistleBlowerContract.methods.approveValidity(id).send({\n      from: this.accounts[0]\n    });\n    console.log(\"Validity Increased: \" + approved);\n  }\n  \n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <p>Contract Address : \"{this.state.contractAddress}\"</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}